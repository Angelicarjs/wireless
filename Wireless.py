# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Wireless
                                 A QGIS plugin
 This plugin creates Areas of Interes for AURORA
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-11-14
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Angelica Moreno
        email                : angelica_uno@hotmail.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.core import *
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from PyQt5.QtCore import Qt, QVariant 
from qgis.PyQt.QtWidgets import QAction, QMessageBox, QPushButton, QTreeWidgetItem

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Wireless_dialog import Wireless_dialog
import os.path
import subprocess
import sys
from datetime import datetime
import processing

#importing pandas
try:
    import pandas as pd
    # print ("pandas imported")
except ImportError:
    print("Trying to Install required module: pandas")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "pandas"])  
    try:
        import pandas as pd
        print("pandas's already in your machine")
    except ImportError:
        print("Fatal error in installing pandas")
    
#importing psycopg2
try:
    import psycopg2
    from psycopg2 import sql
    # print ("psycopg imported")
except ImportError:
    print("Trying to Install required module: psycopg")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "psycopg2"])  
    try:
        import psycopg2
        from psycopg2 import sql 
        print ("psycopg already installed")
    except ImportError:
        print("Fatal error in installing psycopg")


from .module.run_button import RUN_BUTTON


class Wireless:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Wireless_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Wireless')

        self.version = '1.1'
        self.Wireless_dialog = None
        self.message = QMessageBox()
        self.message.setWindowTitle("About Wireless")
        self.message.setIcon(QMessageBox.Information)

        self.message.setText(f"""Wireless Analysis\n
Version {self.version}\n\n
This plugin execute the wireless analysis
""")
        
        self.message.setStandardButtons(QMessageBox.No)
        self.message.button(QMessageBox.No).setText('Close')

        # Check if plugin was started the first time in current QGIS session
        self.first_start = None
        self.dialog_action = None

    def tr(self, message):
            """Get the translation for a string using Qt translation API.

            We implement this ourselves since we do not inherit QObject.

            :param message: String for translation.
            :type message: str, QString

            :returns: Translated version of message.
            :rtype: QString
            """
            # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
            return QCoreApplication.translate('Wireless', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        # print("Initializing GUI...")

        icon_path = ':/plugins/Wireless/icon.png'
        self.dialog_action = self.add_action(
            icon_path,
            text=self.tr(u'Open Wireless'),
            callback=self.run,
            parent=self.iface.mainWindow(),
            add_to_menu = False,
            add_to_toolbar = False)
        

        if not self.Wireless_dialog:  # Creates the states dialog
            self.Wireless_dialog = Wireless_dialog()
            self.Wireless_dialog.setWindowFlags(Qt.WindowStaysOnTopHint)

            # definisco lista stati
            self.USstates = ['01 - ALABAMA', '02 - ALASKA', '04 - ARIZONA', '05 - ARKANSAS', 
                            '06 - CALIFORNIA', '08 - COLORADO', '09 - CONNECTICUT', 
                            '10 - DELAWARE', '11 - DISTRICT OF COLUMBIA', '12 - FLORIDA', '13 - GEORGIA', '15 - HAWAII', 
                            '16 - IDAHO', '17 - ILLINOIS', '18 - INDIANA', '19 - IOWA', 
                            '20 - KANSAS', '21 - KENTUCKY', '22 - LOUISIANA', '23 - MAINE', '24 - MARYLAND',
                            '25 - MASSACHUSETTS', '26 - MICHIGAN', '27 - MINNESOTA', '28 - MISSISSIPPI', '29 - MISSOURI', 
                            '30 - MONTANA', '31 - NEBRASKA', '32 - NEVADA', '33 - NEW HAMPSHIRE', '34 - NEW JERSEY',
                            '35 - NEW MEXICO', '36 - NEW YORK', '37 - NORTH CAROLINA','38 - NORTH DAKOTA', '39 - OHIO',
                            '40 - OKLAHOMA', '41 - OREGON', '42 - PENNSYLVANIA', '44 - RHODE ISLAND',
                            '45 - SOUTH CAROLINA', '46 - SOUTH DAKOTA', '47 - TENNESSEE', '48 - TEXAS', '49 - UTAH',
                            '50 - VERMONT', '51 - VIRGINIA', '53 - WASHINGTON', '54 - WEST VIRGINIA', 
                            '55 - WISCONSIN', '56 - WYOMING' #insert comma here
                ]

            for state in self.USstates:
                self.Wireless_dialog.StatescomboBox.addItem(state)
            
            self.Wireless_dialog.StatescomboBox.setCurrentIndex(0) # checkbox '01- ALABAMA' di default

            # Definisco i pulsanti
            self.QuitButton = self.Wireless_dialog.QuitButton
            self.QuitButton.setCheckable(False)
            self.QuitButton.clicked.connect(self.chiudi_function)

            self.RunButton = self.Wireless_dialog.RunButton         
            self.RunButton.setCheckable(False)
            self.RunButton_class = RUN_BUTTON(self.iface, self.Wireless_dialog,self.USstates)

            self.Wireless_dialog.RunButton.clicked.connect(lambda: self.RunButton_class.output_check())


            
            # Imposta l'icona del bottone
            info_icon_path = ':/plugins/Wireless/icon/letter-i.png'
            self.Wireless_dialog.info_button.setIcon(QIcon(info_icon_path))
            self.Wireless_dialog.info_button.clicked.connect(self.about_message)

            self.iface.addToolBarIcon(self.dialog_action)
            self.iface.addPluginToMenu("&Wireless", self.dialog_action)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        print('unload')

        # Rimuovi solo se dialog_action esiste
        if self.dialog_action:
            self.iface.removePluginMenu(self.tr(u'&Wireless'), self.dialog_action)
            self.iface.removeToolBarIcon(self.dialog_action)

        if self.Wireless_dialog:  # Verifica che il dialogo esista

            try:
                self.Wireless_dialog.info_button.clicked.disconnect()
            except:
                pass

            try:            
                self.Wireless_dialog.RunButton.clicked.disconnect()
            except:
                pass

            try:
                self.Wireless_dialog.QuitButton.clicked.disconnect()
            except:
                pass

            self.Wireless_dialog = None
            self.RunButton = None
            self.QuitButton = None
            self.info_button = None

    #about function
    def about_message(self):
        self.Wireless_dialog.hide()
        result = self.message.exec_()
        if result == QMessageBox.Ok:
            self.Wireless_dialog.show()


    def chiudi_function(self): # self solo all'inizio in creazione delle function
        self.Wireless_dialog.close()
    

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = Wireless_dialog()

        # show the dialog
        self.Wireless_dialog.show()
        # Run the dialog event loop
        result = self.Wireless_dialog.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

        print ("Wireless is a QGIS plugin developed by Angelica Moreno")
    
    
